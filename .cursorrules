# RodePush Cursor Rules

## 项目概述

RodePush 是一个基于 Rust 的 React Native CodePush 解决方案，提供高效的应用程序包打包、差分更新和分发功能。项目采用模块化架构，包含三个主要组件：CLI 工具、服务器和共享核心模块。

## 架构原则

### 核心设计原则
- **模块化**: 共享核心功能，专门的 CLI 和服务器组件
- **性能**: 优化的差分算法和异步操作
- **安全性**: 端到端加密和完整性验证
- **可靠性**: 全面的错误处理和回滚能力
- **可扩展性**: 无状态服务器设计，支持水平扩展

### 技术栈
- **语言**: Rust (2024 edition)
- **异步运行时**: Tokio
- **HTTP框架**: Axum (服务器)
- **CLI框架**: Clap v4
- **序列化**: Serde with JSON
- **数据库**: PostgreSQL with SQLx
- **缓存**: Redis
- **压缩**: Zstandard (zstd)

## 代码规范

### Rust 编码标准
- 使用 Rust 2024 edition
- 遵循 Rust 官方编码规范
- 使用 `cargo fmt` 和 `cargo clippy` 保持代码质量
- 所有公共 API 必须有文档注释
- 使用 `thiserror` 进行错误处理

### 错误处理
```rust
// 使用 thiserror 创建错误类型
#[derive(Debug, thiserror::Error)]
pub enum RodePushError {
    #[error("Bundle error: {0}")]
    Bundle(#[from] BundleError),
    
    #[error("Network error: {0}")]
    Network(#[from] NetworkError),
    
    #[error("Storage error: {0}")]
    Storage(#[from] StorageError),
    
    #[error("Authentication error: {0}")]
    Auth(#[from] AuthError),
}
```

### 日志和追踪
- 使用 `tracing` 进行结构化日志记录
- 为所有操作添加相关性 ID
- 支持可配置的日志级别
- 包含性能指标和错误追踪

### 测试要求
- 单元测试覆盖率 >90%
- 集成测试覆盖跨组件工作流
- 性能基准测试
- 负载测试验证并发性能
- 端到端测试模拟真实部署场景

## 项目结构

### 工作空间组织
```
rodepush/
├── Cargo.toml              # 工作空间配置
├── rodepush-core/          # 核心库
├── rodepush-cli/           # CLI 工具
├── rodepush-server/        # HTTP 服务器
└── target/                 # 构建输出
```

### 核心模块 (rodepush-core)
- `bundle.rs` - Bundle 表示和操作
- `diff.rs` - 差分包生成
- `compression.rs` - Bundle 压缩/解压缩
- `crypto.rs` - 加密操作
- `storage.rs` - 抽象存储接口
- `assets.rs` - React Native 资源管理
- `error.rs` - 错误类型定义
- `logging.rs` - 日志和追踪

### CLI 模块 (rodepush-cli)
- `main.rs` - 入口点和命令解析
- `config.rs` - 配置管理
- `commands/` - 命令实现
- `auth.rs` - 服务器认证
- `progress.rs` - 进度跟踪

### 服务器模块 (rodepush-server)
- `main.rs` - 服务器启动
- `api/` - REST API 端点
- `handlers/` - 请求处理
- `auth/` - 认证中间件
- `storage/` - 存储管理

## API 设计规范

### REST API 端点
```rust
// Bundle 管理
POST   /api/v1/bundles                    // 上传 bundle
GET    /api/v1/bundles/{id}               // 获取 bundle 元数据
GET    /api/v1/bundles/{id}/download      // 下载完整 bundle

// 差分包
GET    /api/v1/diffs/{from}/{to}          // 获取差分包

// 部署管理
POST   /api/v1/deployments                // 创建部署
GET    /api/v1/deployments/{id}           // 获取部署状态
DELETE /api/v1/deployments/{id}           // 回滚部署

// 系统
GET    /api/v1/health                     // 健康检查
GET    /api/v1/metrics                    // 指标端点
```

### 响应格式
```rust
#[derive(Debug, Serialize, Deserialize)]
struct ApiResponse<T> {
    success: bool,
    data: Option<T>,
    error: Option<String>,
    timestamp: DateTime<Utc>,
    request_id: String,
}
```

## 数据模型

### Bundle 结构
```rust
#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct Bundle {
    pub id: BundleId,
    pub version: SemanticVersion,
    pub platform: Platform,
    pub metadata: BundleMetadata,
    pub chunks: Vec<BundleChunk>,
}

#[derive(Debug, Clone, Serialize, Deserialize)]
pub struct BundleMetadata {
    pub id: BundleId,
    pub version: SemanticVersion,
    pub platform: Platform,
    pub created_at: DateTime<Utc>,
    pub size_bytes: u64,
    pub checksum: String,
    pub dependencies: Vec<Dependency>,
    pub chunks: Vec<ChunkMetadata>,
}
```

### 数据库模式 (PostgreSQL)
- `applications` - 应用程序信息
- `bundles` - Bundle 存储
- `deployments` - 部署记录
- `diff_packages` - 差分包缓存

## 配置管理

### CLI 配置 (rodepush.toml)
```toml
[server]
url = "https://api.rodepush.com"
timeout_seconds = 30

[build]
platform = "both"  # ios, android, both
entry_file = "index.js"
output_dir = "./build"

[auth]
api_key_file = "~/.rodepush/api_key"
```

### 服务器配置
```toml
[server]
host = "0.0.0.0"
port = 8080
workers = 4

[database]
url = "postgresql://user:pass@localhost/rodepush"
max_connections = 10

[storage]
type = "filesystem"  # filesystem, s3, gcs
base_path = "/var/lib/rodepush"

[cache]
type = "redis"
url = "redis://localhost:6379"
ttl_seconds = 3600
```

## 安全要求

### 数据保护
- 所有网络通信使用 TLS/HTTPS 加密
- Bundle 完整性使用加密哈希验证
- API 密钥认证和令牌管理
- 输入验证和清理

### 访问控制
- 应用程序隔离
- 环境隔离 (dev, staging, prod)
- 基于角色的访问控制

### Bundle 完整性
- 使用 SHA-256 进行加密哈希
- 多层校验和验证
- 篡改检测和拒绝

## 性能要求

### 优化目标
- 差分包大小优化
- 缓存策略实现
- 内存使用最小化
- 网络带宽优化
- 并发请求处理

### 监控指标
- Bundle 操作性能
- 上传/下载速度
- 差分生成时间
- 部署成功率
- 系统资源使用

## 开发工作流

### 版本控制
- 使用语义化版本控制
- 兼容版本约束 (`^x.y.z`)
- 定期依赖更新
- 安全漏洞检查

### 测试策略
- 单元测试 (TDD 方法)
- 集成测试
- 性能基准测试
- 负载测试
- 端到端测试

### 代码质量
- 使用 `cargo fmt` 格式化
- 使用 `cargo clippy` 检查
- 使用 `cargo test` 运行测试
- 使用 `cargo audit` 安全检查

## 部署和运维

### 部署要求
- 支持水平扩展
- 优雅关闭
- 健康检查端点
- 指标收集
- 日志聚合

### 监控和告警
- 结构化日志记录
- Prometheus 指标
- 性能监控
- 错误率告警
- 资源使用监控

## 文档要求

### 代码文档
- 所有公共 API 必须有文档注释
- 使用 `cargo doc` 生成文档
- 包含使用示例
- 错误处理说明

### 用户文档
- CLI 使用指南
- API 参考文档
- 部署指南
- 故障排除指南

## 实现优先级

### 已完成功能
- [x] 项目初始化和工作空间设置
- [x] 核心错误处理系统
- [x] 日志和追踪基础设施
- [x] Bundle 数据结构和验证
- [x] 加密哈希系统
- [x] Bundle 压缩系统
- [x] 资源管理 (AssetCollection)
- [x] 资源差分算法
- [x] 资源压缩系统
- [x] 存储抽象层 (文件系统)
- [x] 二进制差分算法
- [x] CLI 命令结构和参数解析
- [x] HTTP 服务器基础 (Axum)

### 待实现功能
- [ ] Bundle 分块算法
- [ ] 数据库模式和模型
- [ ] React Native bundle 构建
- [ ] Bundle 上传功能
- [ ] 部署管理命令
- [ ] 认证中间件
- [ ] Bundle 上传 API
- [ ] 差分包服务
- [ ] React Native SDK
- [ ] 客户端更新系统
- [ ] 配置管理系统
- [ ] 监控和可观测性
- [ ] 安全实现
- [ ] 性能优化

## 代码示例

### 创建新模块
```rust
// 在 rodepush-core/src/ 中创建新模块
pub mod new_module;

// 在 lib.rs 中导出
pub use new_module::*;

// 添加测试
#[cfg(test)]
mod tests {
    use super::*;
    
    #[test]
    fn test_new_functionality() {
        // 测试实现
    }
}
```

### 添加新的 CLI 命令
```rust
#[derive(Parser)]
pub enum Command {
    // 现有命令...
    NewCommand {
        #[arg(long)]
        required_param: String,
        #[arg(long, default_value = "default")]
        optional_param: String,
    },
}
```

### 添加新的 API 端点
```rust
pub async fn new_endpoint(
    Path(id): Path<String>,
    Json(payload): Json<NewPayload>,
) -> Result<Json<ApiResponse<NewResponse>>, (StatusCode, String)> {
    // 实现端点逻辑
}
```

## 注意事项

1. **错误处理**: 始终使用适当的错误类型，避免使用 `unwrap()` 或 `expect()`
2. **异步编程**: 使用 `async/await` 进行异步操作
3. **内存安全**: 避免内存泄漏，使用适当的生命周期
4. **性能**: 考虑大文件处理和内存使用
5. **安全性**: 验证所有输入，使用安全的加密操作
6. **测试**: 为所有功能编写测试，包括错误情况
7. **文档**: 保持代码和 API 文档的同步更新
8. **兼容性**: 保持向后兼容性，遵循语义化版本控制

## 工具和命令

### 开发命令
```bash
# 检查代码
cargo check

# 运行测试
cargo test

# 格式化代码
cargo fmt

# 代码检查
cargo clippy

# 生成文档
cargo doc --open

# 安全检查
cargo audit

# 检查过时依赖
cargo outdated --root-deps-only
```

### 构建命令
```bash
# 开发构建
cargo build

# 发布构建
cargo build --release

# 运行 CLI
cargo run --bin rodepush

# 运行服务器
cargo run --bin rodepush-server
```

遵循这些规则将确保 RodePush 项目的一致性、质量和可维护性。 